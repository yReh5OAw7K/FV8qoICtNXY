steps:
#### build and push Docker image if not existing yet
- name: "gcr.io/cloud-builders/gcloud-slim"
  entrypoint: "bash"
  args:
  - "-c"
  - |
    IMAGE_TAGS=($(gcloud container images list-tags eu.gcr.io/${PROJECT_ID}/cloud-run/application --format "value(tags)"))
    if [[ ! "$${IMAGE_TAGS[@]}" =~ "${SHORT_SHA}" ]]
    then
      gcloud builds submit --tag eu.gcr.io/${PROJECT_ID}/cloud-run/application:${SHORT_SHA} cloud-run/application/ --gcs-source-staging-dir gs://${PROJECT_ID}-cloudbuild/source
    fi
#### run safety check
- name: "gcr.io/cloud-builders/docker"
  args:
  - "run"
  - "--entrypoint"
  - "bash"
  - "eu.gcr.io/${PROJECT_ID}/cloud-run/application:${SHORT_SHA}"
  - "-c"
  - "pip install safety && safety check --bare"
#### run unittests
- name: "gcr.io/cloud-builders/docker"
  args:
  - "run"
  - "--entrypoint"
  - "python"
  - "eu.gcr.io/${PROJECT_ID}/cloud-run/application:${SHORT_SHA}"
  - "-m"
  - "unittest"
  - "discover"
  - "-p"
  - "test_*.py"
#### run integration tests
- name: "gcr.io/cloud-builders/docker"
  args:
  - "run"
  - "--network"
  - "cloudbuild"
  - "--env"
  - "PYTHONPATH=/home"
  - "--env"
  - "PROJECT_ID=${PROJECT_ID}"
  - "--env"
  - "K_REVISION=cloudbuild"
  - "--entrypoint"
  - "bash"
  - "eu.gcr.io/${PROJECT_ID}/cloud-run/application:${SHORT_SHA}"
  - "-c"
  - "/usr/bin/Xvfb $$DISPLAY -ac -screen 0 1024x768x16 +extension RANDR & python ./_tests/integration_tests.py"
#### deploy new revision
- name: 'gcr.io/cloud-builders/gcloud-slim'
  args:
  - "run"
  - "deploy"
  - "ib-${_TRADING_MODE}"
  - "--image"
  - "eu.gcr.io/${PROJECT_ID}/cloud-run/application:${SHORT_SHA}"
  - "--region"
  - "${_GCP_REGION}"
  - "--platform"
  - "managed"
  - "--max-instances"
  - "1"
  - "--memory"
  - "2Gi"
  - "--service-account"
  - "ib-trading@${PROJECT_ID}.iam.gserviceaccount.com"
  - "--revision-suffix"
  - "${SHORT_SHA}"
  - "--update-labels"
  - "app=ib-trading,trading-mode=${_TRADING_MODE}"
  - "--update-env-vars"
  - "PROJECT_ID=${PROJECT_ID},TRADING_MODE=${_TRADING_MODE}"
#### delete old revision(s)
- name: "gcr.io/cloud-builders/gcloud-slim"
  entrypoint: "bash"
  args:
  - "-c"
  - |
    if [[ "${_KEEP}" > "0" ]]
    then
      REVISIONS=($(gcloud run revisions list --platform managed --region ${_GCP_REGION} --filter "metadata.labels.trading-mode=${_TRADING_MODE} AND (status.conditions.status=False OR status.conditions.status=Unknown)" --sort-by ~metadata.creationTimestamp --format "value(metadata.name)"))
      for revision in "$${REVISIONS[@]:$_KEEP}"
      do
        # echo "gcloud run revisions delete $${revision}"
        yes | gcloud run revisions delete $${revision} --platform managed --region ${_GCP_REGION}
      done

      REVISION_TAGS=($(gcloud run revisions list --platform managed --region ${_GCP_REGION} --sort-by ~metadata.creationTimestamp --format "value(metadata.name)" | rev | cut -d- -f1 | rev))
      if [[ ! "$${REVISION_TAGS[@]}" =~ "${SHORT_SHA}" ]]
      then
        REVISION_TAGS=("${SHORT_SHA}" $${REVISION_TAGS[@]})
      fi
      IMAGE_TAGS=($(gcloud container images list-tags eu.gcr.io/${PROJECT_ID}/cloud-run/application --format "value(tags)"))
      for tag in "$${IMAGE_TAGS[@]}"
      do
        if [[ ! "$${REVISION_TAGS[@]}" =~ "$${tag}" ]]
        then
          # echo "gcloud container images delete eu.gcr.io/${PROJECT_ID}/cloud-run/application:$${tag}"
          yes | gcloud container images delete eu.gcr.io/${PROJECT_ID}/cloud-run/application:$${tag}
        fi
      done
    fi
substitutions:
  _GCP_REGION: europe-west6
  _KEEP: "3"
